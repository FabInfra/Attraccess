name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare site for deployment
        run: |
          # Create the main staging directory for the new site
          mkdir -p ./staging_site

          # --- Download and preserve existing non-docs/non-index content ---
          echo "Downloading existing site to preserve other files..."
          mkdir -p ./current_live_site
          DOWNLOAD_SUCCESS=false
          if curl -s -f -o site.tar.gz "https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/site.tar.gz"; then
            if file site.tar.gz | grep -q "gzip compressed data"; then
              if tar -xzf site.tar.gz -C ./current_live_site; then
                echo "Successfully downloaded and extracted existing site."
                DOWNLOAD_SUCCESS=true
                # Copy existing files/dirs from current_live_site to staging_site,
                # excluding 'docs' directory and 'index.html' at the root.
                echo "Copying preserved files from current site to staging area..."
                find ./current_live_site -mindepth 1 -maxdepth 1 ! -name 'docs' ! -name 'index.html' -exec cp -R {} ./staging_site/ \;
              else
                echo "Extraction of existing site failed."
              fi
            else
              echo "Downloaded site.tar.gz is not a valid gzip archive."
            fi
          else
            echo "No existing site archive found or download failed."
          fi
          if [ "$DOWNLOAD_SUCCESS" = false ]; then
              echo "Proceeding without preserving files from a previous deployment."
          fi
          # --- End of preservation ---

          # Ensure essential directories like 'firmware' are explicitly created in staging_site
          # if they weren't copied from a previous deployment or if they are always needed.
          mkdir -p ./staging_site/firmware

          # Ensure the /docs directory exists in staging_site
          mkdir -p ./staging_site/docs

          # Copy new docs content to staging_site/docs/
          echo "Copying new documentation content..."
          cp -R docs/* ./staging_site/docs/

          # Create _headers file in staging_site/docs/ if it doesn't exist from 'docs/*'
          if [ ! -f "./staging_site/docs/_headers" ]; then
            echo "Creating _headers file in staging_site/docs/..."
            cat > ./staging_site/docs/_headers << EOL
          /*
            Access-Control-Allow-Origin: *
            Access-Control-Allow-Methods: GET, OPTIONS
            Access-Control-Allow-Headers: Content-Type
          EOL
          fi

          # Create the root index.html that redirects to /docs/
          echo "Creating root redirect index.html..."
          cat > ./staging_site/index.html << EOL
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Redirecting to Documentation</title>
              <meta http-equiv="refresh" content="0; url=./docs/">
              <link rel="canonical" href="./docs/">
          </head>
          <body>
              <p>If you are not redirected automatically, follow this <a href="./docs/">link to the documentation</a>.</p>
          </body>
          </html>
          EOL

          # The artifact upload will now use ./staging_site.
          # No need to create a tarball here unless specifically needed for other purposes.

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './staging_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
