// This file is auto-generated by @hey-api/openapi-ts

export type CreateUserDto = {
    /**
     * The username for the new user
     */
    username: string;
    /**
     * The email address for the new user
     */
    email: string;
    /**
     * The password for the new user
     */
    password: string;
    /**
     * The authentication strategy to use
     */
    strategy: 'local_password' | 'sso';
};

/**
 * The authentication strategy to use
 */
export enum strategy {
    LOCAL_PASSWORD = 'local_password',
    SSO = 'sso'
}

export type SystemPermissions = {
    /**
     * Whether the user can manage resources
     */
    canManageResources: boolean;
    /**
     * Whether the user can manage system configuration
     */
    canManageSystemConfiguration: boolean;
    /**
     * Whether the user can manage users
     */
    canManageUsers: boolean;
};

export type User = {
    /**
     * The unique identifier of the user
     */
    id: number;
    /**
     * The username of the user
     */
    username: string;
    /**
     * Whether the user has verified their email address
     */
    isEmailVerified: boolean;
    /**
     * System-wide permissions for the user
     */
    systemPermissions: SystemPermissions;
    /**
     * When the user was created
     */
    createdAt: string;
    /**
     * When the user was last updated
     */
    updatedAt: string;
};

export type VerifyEmailDto = {
    /**
     * The token to verify the email
     */
    token: string;
    /**
     * The email to verify
     */
    email: string;
};

export type UserNotFoundException = {
    [key: string]: unknown;
};

export type PaginatedUsersResponseDto = {
    total: number;
    page: number;
    limit: number;
    /**
     * The next page number, or null if it is the last page.
     */
    nextPage: number | null;
    totalPages: number;
    data: Array<User>;
};

export type UpdateUserPermissionsDto = {
    /**
     * Whether the user can manage resources
     */
    canManageResources?: boolean;
    /**
     * Whether the user can manage system configuration
     */
    canManageSystemConfiguration?: boolean;
    /**
     * Whether the user can manage users
     */
    canManageUsers?: boolean;
};

export type UserPermissionsUpdateItem = {
    /**
     * The user ID
     */
    userId: number;
    /**
     * The permission updates to apply
     */
    permissions: UpdateUserPermissionsDto;
};

export type BulkUpdateUserPermissionsDto = {
    /**
     * Array of user permission updates
     */
    updates: Array<UserPermissionsUpdateItem>;
};

export type CreateSessionResponse = {
    /**
     * The user that has been logged in
     */
    user: User;
    /**
     * The authentication token
     */
    authToken: string;
};

export type SSOProviderOIDCConfiguration = {
    /**
     * The unique identifier of the provider
     */
    id: number;
    /**
     * The ID of the SSO provider
     */
    ssoProviderId: number;
    /**
     * The issuer of the provider
     */
    issuer: string;
    /**
     * The authorization URL of the provider
     */
    authorizationURL: string;
    /**
     * The token URL of the provider
     */
    tokenURL: string;
    /**
     * The user info URL of the provider
     */
    userInfoURL: string;
    /**
     * The client ID of the provider
     */
    clientId: string;
    /**
     * The client secret of the provider
     */
    clientSecret: string;
    /**
     * When the user was created
     */
    createdAt: string;
    /**
     * When the user was last updated
     */
    updatedAt: string;
};

export type SSOProvider = {
    /**
     * The unique identifier of the provider
     */
    id: number;
    /**
     * The internal name of the provider
     */
    name: string;
    /**
     * The type of the provider
     */
    type: string;
    /**
     * When the user was created
     */
    createdAt: string;
    /**
     * When the user was last updated
     */
    updatedAt: string;
    /**
     * The OIDC configuration of the provider
     */
    oidcConfiguration: SSOProviderOIDCConfiguration;
};

export type CreateOIDCConfigurationDto = {
    /**
     * The issuer of the provider
     */
    issuer: string;
    /**
     * The authorization URL of the provider
     */
    authorizationURL: string;
    /**
     * The token URL of the provider
     */
    tokenURL: string;
    /**
     * The user info URL of the provider
     */
    userInfoURL: string;
    /**
     * The client ID of the provider
     */
    clientId: string;
    /**
     * The client secret of the provider
     */
    clientSecret: string;
};

export type CreateSSOProviderDto = {
    /**
     * The name of the SSO provider
     */
    name: string;
    /**
     * The type of SSO provider
     */
    type: 'OIDC';
    /**
     * The OIDC configuration for the provider
     */
    oidcConfiguration?: CreateOIDCConfigurationDto;
};

/**
 * The type of SSO provider
 */
export enum type {
    OIDC = 'OIDC'
}

export type UpdateOIDCConfigurationDto = {
    /**
     * The issuer of the provider
     */
    issuer?: string;
    /**
     * The authorization URL of the provider
     */
    authorizationURL?: string;
    /**
     * The token URL of the provider
     */
    tokenURL?: string;
    /**
     * The user info URL of the provider
     */
    userInfoURL?: string;
    /**
     * The client ID of the provider
     */
    clientId?: string;
    /**
     * The client secret of the provider
     */
    clientSecret?: string;
};

export type UpdateSSOProviderDto = {
    /**
     * The name of the SSO provider
     */
    name?: string;
    /**
     * The OIDC configuration for the provider
     */
    oidcConfiguration?: UpdateOIDCConfigurationDto;
};

export type CreateResourceGroupDto = {
    name: string;
    description?: string;
};

export type ResourceGroup = {
    /**
     * The unique identifier of the resource group
     */
    id: number;
    /**
     * The name of the resource
     */
    name: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * When the resource was created
     */
    createdAt: string;
    /**
     * When the resource was last updated
     */
    updatedAt: string;
};

export type PaginatedResourceGroupResponseDto = {
    total: number;
    page: number;
    limit: number;
    /**
     * The next page number, or null if it is the last page.
     */
    nextPage: number | null;
    totalPages: number;
    data: Array<ResourceGroup>;
};

export type UpdateResourceGroupDto = {
    name?: string;
    description?: string;
};

export type CreateResourceDto = {
    /**
     * The name of the resource
     */
    name: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * Resource image file
     */
    image?: (Blob | File);
};

export type Resource = {
    /**
     * The unique identifier of the resource
     */
    id: number;
    /**
     * The name of the resource
     */
    name: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * The filename of the resource image
     */
    imageFilename?: string;
    /**
     * When the resource was created
     */
    createdAt: string;
    /**
     * When the resource was last updated
     */
    updatedAt: string;
    /**
     * The groups the resource belongs to
     */
    groups: Array<ResourceGroup>;
};

export type PaginatedResourceResponseDto = {
    total: number;
    page: number;
    limit: number;
    /**
     * The next page number, or null if it is the last page.
     */
    nextPage: number | null;
    totalPages: number;
    data: Array<Resource>;
};

export type UpdateResourceDto = {
    /**
     * The name of the resource
     */
    name?: string;
    /**
     * A detailed description of the resource
     */
    description?: string;
    /**
     * New resource image file
     */
    image?: (Blob | File);
};

export type StartUsageSessionDto = {
    /**
     * Optional notes about the usage session
     */
    notes?: string;
};

export type ResourceUsage = {
    /**
     * The unique identifier of the resource usage
     */
    id: number;
    /**
     * The ID of the resource being used
     */
    resourceId: number;
    /**
     * The ID of the user using the resource (null if user was deleted)
     */
    userId?: number;
    /**
     * When the usage session started
     */
    startTime: string;
    /**
     * Notes provided when starting the session
     */
    startNotes?: string;
    /**
     * When the usage session ended
     */
    endTime?: string;
    /**
     * Notes provided when ending the session
     */
    endNotes?: string;
    /**
     * The user who used the resource
     */
    user?: User;
    /**
     * The duration of the usage session in minutes
     */
    usageInMinutes: number;
};

export type EndUsageSessionDto = {
    /**
     * Additional notes about the completed session
     */
    notes?: string;
    /**
     * The end time of the session. If not provided, current time will be used.
     */
    endTime?: string;
};

export type GetResourceHistoryResponseDto = {
    total: number;
    page: number;
    limit: number;
    /**
     * The next page number, or null if it is the last page.
     */
    nextPage: number | null;
    totalPages: number;
    data: Array<ResourceUsage>;
};

export type GetActiveUsageSessionDto = {
    activeSession: ResourceUsage;
};

export type CompleteIntroductionDto = {
    /**
     * User ID
     */
    userId?: number;
};

export type ResourceIntroductionHistoryItem = {
    /**
     * The unique identifier of the introduction history entry
     */
    id: number;
    /**
     * The ID of the related introduction
     */
    introductionId: number;
    /**
     * The action performed (revoke or unrevoke)
     */
    action: 'revoke' | 'unrevoke';
    /**
     * The ID of the user who performed the action
     */
    performedByUserId: number;
    /**
     * Optional comment explaining the reason for the action
     */
    comment?: string;
    /**
     * When the action was performed
     */
    createdAt: string;
    /**
     * The user who performed the action
     */
    performedByUser: User;
};

/**
 * The action performed (revoke or unrevoke)
 */
export enum action {
    REVOKE = 'revoke',
    UNREVOKE = 'unrevoke'
}

export type ResourceIntroduction = {
    /**
     * The unique identifier of the introduction
     */
    id: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
    /**
     * The ID of the user who received the introduction
     */
    receiverUserId: number;
    /**
     * The ID of the user who tutored the receiver
     */
    tutorUserId: number;
    /**
     * When the introduction was completed
     */
    completedAt: string;
    /**
     * When the introduction record was created
     */
    createdAt: string;
    /**
     * The user who received the introduction
     */
    receiverUser: User;
    /**
     * The user who tutored the receiver
     */
    tutorUser: User;
    /**
     * History of revoke/unrevoke actions for this introduction
     */
    history: Array<ResourceIntroductionHistoryItem>;
};

export type PaginatedResourceIntroductionResponseDto = {
    total: number;
    page: number;
    limit: number;
    /**
     * The next page number, or null if it is the last page.
     */
    nextPage: number | null;
    totalPages: number;
    data: Array<ResourceIntroduction>;
};

export type RevokeIntroductionDto = {
    /**
     * Optional comment explaining the reason for revoking access
     */
    comment?: string;
};

export type UnrevokeIntroductionDto = {
    /**
     * Optional comment explaining the reason for unrevoking access
     */
    comment?: string;
};

export type ResourceIntroducer = {
    /**
     * The unique identifier of the introduction permission
     */
    id: number;
    /**
     * The ID of the resource
     */
    resourceId: number;
    /**
     * The ID of the user who can give introductions
     */
    userId: number;
    /**
     * When the permission was granted
     */
    grantedAt: string;
    /**
     * The user who can give introductions
     */
    user: User;
};

export type CanManageIntroducersResponseDto = {
    /**
     * Whether the user can manage introducers for the resource
     */
    canManageIntroducers: boolean;
};

export type CompleteGroupIntroductionDto = {
    /**
     * User ID to introduce
     */
    userId: number;
};

export type MqttResourceConfig = {
    /**
     * The unique identifier of the MQTT resource configuration
     */
    id: number;
    /**
     * The ID of the resource this configuration is for
     */
    resourceId: number;
    /**
     * The ID of the MQTT server to publish to
     */
    serverId: number;
    /**
     * Topic template using Handlebars for in-use status
     */
    inUseTopic: string;
    /**
     * Message template using Handlebars for in-use status
     */
    inUseMessage: string;
    /**
     * Topic template using Handlebars for not-in-use status
     */
    notInUseTopic: string;
    /**
     * Message template using Handlebars for not-in-use status
     */
    notInUseMessage: string;
    /**
     * When the MQTT resource configuration was created
     */
    createdAt: string;
    /**
     * When the MQTT resource configuration was last updated
     */
    updatedAt: string;
};

export type CreateMqttResourceConfigDto = {
    /**
     * ID of the MQTT server to use
     */
    serverId: number;
    /**
     * Topic template for when resource is in use
     */
    inUseTopic: string;
    /**
     * Message template for when resource is in use
     */
    inUseMessage: string;
    /**
     * Topic template for when resource is not in use
     */
    notInUseTopic: string;
    /**
     * Message template for when resource is not in use
     */
    notInUseMessage: string;
};

export type TestMqttConfigResponseDto = {
    /**
     * Whether the test was successful
     */
    success: boolean;
    /**
     * Message describing the test result
     */
    message: string;
};

export type MqttServer = {
    /**
     * The unique identifier of the MQTT server
     */
    id: number;
    /**
     * Friendly name for the MQTT server
     */
    name: string;
    /**
     * MQTT server hostname/IP
     */
    host: string;
    /**
     * MQTT server port (default: 1883 for MQTT, 8883 for MQTTS)
     */
    port: number;
    /**
     * Optional authentication username
     */
    username?: string;
    /**
     * Optional authentication password
     */
    password?: string;
    /**
     * Client ID for MQTT connection
     */
    clientId?: string;
    /**
     * Whether to use TLS/SSL
     */
    useTls: boolean;
    /**
     * When the MQTT server was created
     */
    createdAt: string;
    /**
     * When the MQTT server was last updated
     */
    updatedAt: string;
};

export type CreateMqttServerDto = {
    /**
     * Friendly name for the MQTT server
     */
    name: string;
    /**
     * Hostname or IP address of the MQTT server
     */
    host: string;
    /**
     * Port number of the MQTT server
     */
    port: number;
    /**
     * Optional username for authentication
     */
    username?: string;
    /**
     * Optional password for authentication
     */
    password?: string;
    /**
     * Optional client ID for MQTT connection
     */
    clientId?: string;
    /**
     * Whether to use TLS/SSL for the connection
     */
    useTls?: boolean;
};

export type UpdateMqttServerDto = {
    /**
     * Friendly name for the MQTT server
     */
    name?: string;
    /**
     * Hostname or IP address of the MQTT server
     */
    host?: string;
    /**
     * Port number of the MQTT server
     */
    port?: number;
    /**
     * Optional username for authentication
     */
    username?: string;
    /**
     * Optional password for authentication
     */
    password?: string;
    /**
     * Optional client ID for MQTT connection
     */
    clientId?: string;
    /**
     * Whether to use TLS/SSL for the connection
     */
    useTls?: boolean;
};

export type TestConnectionResponseDto = {
    /**
     * Whether the connection test was successful
     */
    success: boolean;
    /**
     * Message describing the test result
     */
    message: string;
};

export type MqttHealthStatusDto = {
    /**
     * Whether the connection is healthy
     */
    healthy: boolean;
    /**
     * Detailed health status message
     */
    details: string;
};

export type MqttConnectionStatsDto = {
    /**
     * Number of connection attempts
     */
    connectionAttempts: number;
    /**
     * Number of failed connections
     */
    connectionFailures: number;
    /**
     * Number of successful connections
     */
    connectionSuccesses: number;
    /**
     * Timestamp of last successful connection
     */
    lastConnectTime?: string;
    /**
     * Timestamp of last disconnection
     */
    lastDisconnectTime?: string;
};

export type MqttMessageStatsDto = {
    /**
     * Number of successfully published messages
     */
    published: number;
    /**
     * Number of failed message publications
     */
    failed: number;
    /**
     * Timestamp of last successful message publication
     */
    lastPublishTime?: string;
    /**
     * Timestamp of last failed message publication
     */
    lastFailureTime?: string;
};

export type MqttServerStatsDto = {
    /**
     * Connection statistics
     */
    connection: MqttConnectionStatsDto;
    /**
     * Message statistics
     */
    messages: MqttMessageStatsDto;
};

export type MqttServerStatusDto = {
    /**
     * Whether the server is currently connected
     */
    connected: boolean;
    /**
     * Health status of the connection
     */
    healthStatus: MqttHealthStatusDto;
    /**
     * Detailed statistics
     */
    stats: MqttServerStatsDto;
};

export type AllMqttServerStatusesDto = {
    /**
     * Map of server IDs to their statuses
     */
    servers: {
        [key: string]: MqttServerStatusDto;
    };
};

export type WebhookConfigResponseDto = {
    /**
     * The unique identifier of the webhook configuration
     */
    id: number;
    /**
     * The ID of the resource this webhook configuration is for
     */
    resourceId: number;
    /**
     * Friendly name for the webhook
     */
    name: string;
    /**
     * Destination URL for the webhook. Supports templating with variables like {{id}}, {{name}}, {{event}}, etc.
     */
    url: string;
    /**
     * HTTP method to use for the webhook request
     */
    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    /**
     * JSON object for custom headers. Values can include templates like {{id}}, {{name}}, etc.
     */
    headers: string;
    /**
     * Template for payload when resource is in use
     */
    inUseTemplate: string;
    /**
     * Template for payload when resource is not in use
     */
    notInUseTemplate: string;
    /**
     * Whether the webhook is active
     */
    active: boolean;
    /**
     * Whether to enable retry mechanism for failed webhook requests
     */
    retryEnabled: boolean;
    /**
     * Number of retry attempts for failed webhook requests
     */
    maxRetries: number;
    /**
     * Delay in milliseconds between retries
     */
    retryDelay: number;
    /**
     * Name of the header that contains the signature
     */
    signatureHeader: string;
    /**
     * When the webhook configuration was created
     */
    createdAt: string;
    /**
     * When the webhook configuration was last updated
     */
    updatedAt: string;
};

/**
 * HTTP method to use for the webhook request
 */
export enum method {
    GET = 'GET',
    POST = 'POST',
    PUT = 'PUT',
    PATCH = 'PATCH',
    DELETE = 'DELETE'
}

export type CreateWebhookConfigDto = {
    /**
     * Friendly name for the webhook
     */
    name: string;
    /**
     * Destination URL for the webhook. Supports templating with variables like {{id}}, {{name}}, {{event}}, etc.
     */
    url: string;
    /**
     * HTTP method to use for the webhook request
     */
    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    /**
     * JSON object for custom headers. Values can include templates like {{id}}, {{name}}, etc.
     */
    headers?: string;
    /**
     * Template for payload when resource is in use
     */
    inUseTemplate: string;
    /**
     * Template for payload when resource is not in use
     */
    notInUseTemplate: string;
    /**
     * Whether the webhook is active
     */
    active?: boolean;
    /**
     * Whether to enable retry mechanism for failed webhook requests
     */
    retryEnabled?: boolean;
    /**
     * Number of retry attempts for failed webhook requests (maximum 10)
     */
    maxRetries?: number;
    /**
     * Delay in milliseconds between retries (maximum 10000)
     */
    retryDelay?: number;
    /**
     * Name of the header that contains the signature
     */
    signatureHeader?: string;
};

export type UpdateWebhookConfigDto = {
    /**
     * Friendly name for the webhook
     */
    name?: string;
    /**
     * Destination URL for the webhook. Supports templating with variables like {{id}}, {{name}}, {{event}}, etc.
     */
    url?: string;
    /**
     * HTTP method to use for the webhook request
     */
    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    /**
     * JSON object for custom headers. Values can include templates like {{id}}, {{name}}, etc.
     */
    headers?: string;
    /**
     * Template for payload when resource is in use
     */
    inUseTemplate?: string;
    /**
     * Template for payload when resource is not in use
     */
    notInUseTemplate?: string;
    /**
     * Whether to enable retry mechanism for failed webhook requests
     */
    retryEnabled?: boolean;
    /**
     * Number of retry attempts for failed webhook requests (maximum 10)
     */
    maxRetries?: number;
    /**
     * Delay in milliseconds between retries (maximum 10000)
     */
    retryDelay?: number;
    /**
     * Name of the header that contains the signature
     */
    signatureHeader?: string;
};

export type WebhookStatusDto = {
    /**
     * Whether the webhook is active
     */
    active: boolean;
};

export type WebhookTestResponseDto = {
    /**
     * Whether the test was successful
     */
    success: boolean;
    /**
     * Message describing the test result
     */
    message: string;
};

export type Ping2Response = {
    message?: string;
};

export type CreateOneUserData = {
    requestBody: CreateUserDto;
};

export type CreateOneUserResponse = User;

export type GetAllUsersData = {
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Search query
     */
    search?: string;
};

export type GetAllUsersResponse = PaginatedUsersResponseDto;

export type VerifyEmailData = {
    requestBody: VerifyEmailDto;
};

export type VerifyEmailResponse = {
    message?: string;
};

export type GetCurrentResponse = User;

export type GetOneUserByIdData = {
    id: number;
};

export type GetOneUserByIdResponse = User;

export type UpdatePermissionsData = {
    id: number;
    requestBody: UpdateUserPermissionsDto;
};

export type UpdatePermissionsResponse = User;

export type GetPermissionsData = {
    id: number;
};

export type GetPermissionsResponse = {
    canManageResources?: boolean;
    canManageSystemConfiguration?: boolean;
    canManageUsers?: boolean;
};

export type BulkUpdatePermissionsData = {
    requestBody: BulkUpdateUserPermissionsDto;
};

export type BulkUpdatePermissionsResponse = Array<User>;

export type GetAllWithPermissionData = {
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Filter users by permission
     */
    permission?: 'canManageResources' | 'canManageSystemConfiguration' | 'canManageUsers';
};

export type GetAllWithPermissionResponse = PaginatedUsersResponseDto;

export type CreateSessionData = {
    requestBody: {
        username?: string;
        password?: string;
    };
};

export type CreateSessionResponse2 = CreateSessionResponse;

export type EndSessionResponse = {
    [key: string]: unknown;
};

export type GetAllSsoProvidersResponse = Array<SSOProvider>;

export type CreateOneSsoProviderData = {
    requestBody: CreateSSOProviderDto;
};

export type CreateOneSsoProviderResponse = SSOProvider;

export type GetOneSsoProviderByIdData = {
    /**
     * The ID of the SSO provider
     */
    id: number;
};

export type GetOneSsoProviderByIdResponse = SSOProvider;

export type UpdateOneSsoProviderData = {
    /**
     * The ID of the SSO provider
     */
    id: number;
    requestBody: UpdateSSOProviderDto;
};

export type UpdateOneSsoProviderResponse = SSOProvider;

export type DeleteOneSsoProviderData = {
    /**
     * The ID of the SSO provider
     */
    id: number;
};

export type DeleteOneSsoProviderResponse = unknown;

export type LoginWithOidcData = {
    /**
     * The ID of the SSO provider
     */
    providerId: string;
    /**
     * The URL to redirect to after login (optional), if you intend to redirect to your frontned, your frontend should pass the query parameters back to the sso callback endpoint to retreive a JWT token for furhter authentication
     */
    redirectTo?: unknown;
};

export type LoginWithOidcResponse = unknown;

export type OidcLoginCallbackData = {
    code: unknown;
    iss: unknown;
    /**
     * The ID of the SSO provider
     */
    providerId: string;
    redirectTo: string;
    sessionState: unknown;
    state: unknown;
};

export type OidcLoginCallbackResponse = CreateSessionResponse;

export type CreateOneResourceGroupData = {
    requestBody: CreateResourceGroupDto;
};

export type CreateOneResourceGroupResponse = ResourceGroup;

export type GetAllResourceGroupsData = {
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Search term for name or description
     */
    search?: string;
};

export type GetAllResourceGroupsResponse = PaginatedResourceGroupResponseDto;

export type GetOneResourceGroupByIdData = {
    /**
     * Resource Group ID
     */
    id: number;
};

export type GetOneResourceGroupByIdResponse = ResourceGroup;

export type UpdateOneResourceGroupData = {
    /**
     * Resource Group ID
     */
    id: number;
    requestBody: UpdateResourceGroupDto;
};

export type UpdateOneResourceGroupResponse = ResourceGroup;

export type DeleteOneResourceGroupData = {
    /**
     * Resource Group ID
     */
    id: number;
};

export type DeleteOneResourceGroupResponse = void;

export type CreateOneResourceData = {
    formData: CreateResourceDto;
};

export type CreateOneResourceResponse = Resource;

export type GetAllResourcesData = {
    /**
     * Group ID to filter resources. Send -1 to find ungrouped resources.
     */
    groupId?: number;
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Search term to filter resources
     */
    search?: string;
};

export type GetAllResourcesResponse = PaginatedResourceResponseDto;

export type GetOneResourceByIdData = {
    id: number;
};

export type GetOneResourceByIdResponse = Resource;

export type UpdateOneResourceData = {
    formData: UpdateResourceDto;
    id: number;
};

export type UpdateOneResourceResponse = Resource;

export type DeleteOneResourceData = {
    id: number;
};

export type DeleteOneResourceResponse = void;

export type AddResourceToGroupData = {
    groupId: number;
    id: number;
};

export type AddResourceToGroupResponse = Resource;

export type RemoveResourceFromGroupData = {
    groupId: number;
    id: number;
};

export type RemoveResourceFromGroupResponse = void;

export type StartSessionData = {
    requestBody: StartUsageSessionDto;
    resourceId: number;
};

export type StartSessionResponse = ResourceUsage;

export type EndSessionData = {
    requestBody: EndUsageSessionDto;
    resourceId: number;
};

export type GetHistoryOfResourceUsageData = {
    /**
     * The number of items per page
     */
    limit?: number;
    /**
     * The page number to retrieve
     */
    page?: number;
    resourceId: number;
    /**
     * The user ID to filter by
     */
    userId?: number;
};

export type GetHistoryOfResourceUsageResponse = GetResourceHistoryResponseDto;

export type GetActiveSessionData = {
    resourceId: number;
};

export type GetActiveSessionResponse = GetActiveUsageSessionDto;

export type MarkCompletedData = {
    requestBody: CompleteIntroductionDto;
    resourceId: number;
};

export type MarkCompletedResponse = ResourceIntroduction;

export type GetAllResourceIntroductionsData = {
    /**
     * Number of items per page
     */
    limit: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    resourceId: number;
};

export type GetAllResourceIntroductionsResponse = PaginatedResourceIntroductionResponseDto;

export type CheckStatusData = {
    resourceId: number;
};

export type CheckStatusResponse = {
    hasValidIntroduction?: boolean;
};

export type MarkRevokedData = {
    introductionId: number;
    requestBody: RevokeIntroductionDto;
    resourceId: number;
};

export type MarkRevokedResponse = ResourceIntroductionHistoryItem;

export type MarkUnrevokedData = {
    introductionId: number;
    requestBody: UnrevokeIntroductionDto;
    resourceId: number;
};

export type MarkUnrevokedResponse = ResourceIntroductionHistoryItem;

export type GetHistoryOfIntroductionData = {
    introductionId: number;
    resourceId: number;
};

export type GetHistoryOfIntroductionResponse = Array<ResourceIntroductionHistoryItem>;

export type CheckIsRevokedStatusData = {
    introductionId: number;
    resourceId: number;
};

export type CheckIsRevokedStatusResponse = {
    isRevoked?: boolean;
};

export type GetOneResourceIntroductionData = {
    introductionId: number;
    resourceId: number;
};

export type GetOneResourceIntroductionResponse = ResourceIntroduction;

export type CheckCanManagePermissionData = {
    resourceId: number;
};

export type CheckCanManagePermissionResponse = {
    canManageIntroductions?: boolean;
};

export type GetAllResourceIntroducersData = {
    resourceId: number;
};

export type GetAllResourceIntroducersResponse = Array<ResourceIntroducer>;

export type AddOneData = {
    resourceId: number;
    userId: number;
};

export type AddOneResponse = ResourceIntroducer;

export type RemoveOneData = {
    resourceId: number;
    userId: number;
};

export type RemoveOneResponse = void;

export type GetAllResourceGroupIntroducersData = {
    groupId: number;
};

export type GetAllResourceGroupIntroducersResponse = Array<ResourceIntroducer>;

export type AddGroupIntroducerData = {
    groupId: number;
    userId: number;
};

export type AddGroupIntroducerResponse = ResourceIntroducer;

export type RemoveGroupIntroducerData = {
    groupId: number;
    userId: number;
};

export type RemoveGroupIntroducerResponse = void;

export type MarkGroupIntroductionCompletedData = {
    groupId: number;
    requestBody: CompleteGroupIntroductionDto;
};

export type MarkGroupIntroductionCompletedResponse = ResourceIntroduction;

export type GetAllResourceGroupIntroductionsData = {
    groupId: number;
};

export type GetAllResourceGroupIntroductionsResponse = unknown;

export type CheckGroupIntroductionStatusData = {
    groupId: number;
};

export type CheckGroupIntroductionStatusResponse = {
    hasValidIntroduction?: boolean;
};

export type MarkGroupIntroductionRevokedData = {
    groupId: number;
    introductionId: number;
    requestBody: RevokeIntroductionDto;
};

export type MarkGroupIntroductionRevokedResponse = ResourceIntroductionHistoryItem;

export type MarkGroupIntroductionUnrevokedData = {
    groupId: number;
    introductionId: number;
    requestBody: UnrevokeIntroductionDto;
};

export type MarkGroupIntroductionUnrevokedResponse = ResourceIntroductionHistoryItem;

export type GetHistoryOfGroupIntroductionData = {
    groupId: number;
    introductionId: number;
};

export type GetHistoryOfGroupIntroductionResponse = Array<ResourceIntroductionHistoryItem>;

export type GetOneGroupIntroductionData = {
    groupId: number;
    introductionId: number;
};

export type GetOneGroupIntroductionResponse = ResourceIntroduction;

export type GetOneMqttConfigurationData = {
    resourceId: number;
};

export type GetOneMqttConfigurationResponse = MqttResourceConfig;

export type UpsertOneData = {
    requestBody: CreateMqttResourceConfigDto;
    resourceId: number;
};

export type UpsertOneResponse = MqttResourceConfig;

export type DeleteOneMqttConfigurationData = {
    resourceId: number;
};

export type DeleteOneMqttConfigurationResponse = unknown;

export type TestOneData = {
    resourceId: number;
};

export type TestOneResponse = TestMqttConfigResponseDto;

export type GetAllMqttServersResponse = Array<MqttServer>;

export type CreateOneMqttServerData = {
    requestBody: CreateMqttServerDto;
};

export type CreateOneMqttServerResponse = MqttServer;

export type GetOneMqttServerByIdData = {
    id: number;
};

export type GetOneMqttServerByIdResponse = MqttServer;

export type UpdateOneMqttServerData = {
    id: number;
    requestBody: UpdateMqttServerDto;
};

export type UpdateOneMqttServerResponse = MqttServer;

export type DeleteOneMqttServerData = {
    id: number;
};

export type DeleteOneMqttServerResponse = unknown;

export type TestConnectionData = {
    id: number;
};

export type TestConnectionResponse = TestConnectionResponseDto;

export type GetStatusOfOneData = {
    id: number;
};

export type GetStatusOfOneResponse = MqttServerStatusDto;

export type GetStatusOfAllResponse = AllMqttServerStatusesDto;

export type SseControllerStreamEventsData = {
    resourceId: number;
};

export type SseControllerStreamEventsResponse = unknown;

export type GetAllWebhookConfigurationsData = {
    /**
     * Resource ID
     */
    resourceId: number;
};

export type GetAllWebhookConfigurationsResponse = Array<WebhookConfigResponseDto>;

export type CreateOneWebhookConfigurationData = {
    requestBody: CreateWebhookConfigDto;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type CreateOneWebhookConfigurationResponse = WebhookConfigResponseDto;

export type GetOneWebhookConfigurationByIdData = {
    /**
     * Webhook configuration ID
     */
    id: number;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type GetOneWebhookConfigurationByIdResponse = WebhookConfigResponseDto;

export type UpdateOneWebhookConfigurationData = {
    /**
     * Webhook configuration ID
     */
    id: number;
    requestBody: UpdateWebhookConfigDto;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type UpdateOneWebhookConfigurationResponse = WebhookConfigResponseDto;

export type DeleteOneWebhookConfigurationData = {
    /**
     * Webhook configuration ID
     */
    id: number;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type DeleteOneWebhookConfigurationResponse = void;

export type UpdateStatusData = {
    /**
     * Webhook configuration ID
     */
    id: number;
    requestBody: WebhookStatusDto;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type UpdateStatusResponse = WebhookConfigResponseDto;

export type TestData = {
    /**
     * Webhook configuration ID
     */
    id: number;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type TestResponse = WebhookTestResponseDto;

export type RegenerateSecretData = {
    /**
     * Webhook configuration ID
     */
    id: number;
    /**
     * Resource ID
     */
    resourceId: number;
};

export type RegenerateSecretResponse = WebhookConfigResponseDto;

export type $OpenApiTs = {
    '/api/ping': {
        get: {
            res: {
                /**
                 * API is available
                 */
                200: {
                    message?: string;
                };
            };
        };
    };
    '/api/users': {
        post: {
            req: CreateOneUserData;
            res: {
                /**
                 * The user has been successfully created.
                 */
                201: User;
                /**
                 * Invalid input data.
                 */
                400: unknown;
            };
        };
        get: {
            req: GetAllUsersData;
            res: {
                /**
                 * List of users.
                 */
                200: PaginatedUsersResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
            };
        };
    };
    '/api/users/verify-email': {
        post: {
            req: VerifyEmailData;
            res: {
                /**
                 * Email verified successfully.
                 */
                200: {
                    message?: string;
                };
                /**
                 * Invalid token or email.
                 */
                400: unknown;
            };
        };
    };
    '/api/users/me': {
        get: {
            res: {
                /**
                 * The current user.
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/users/{id}': {
        get: {
            req: GetOneUserByIdData;
            res: {
                /**
                 * The user with the specified ID.
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to access this resource.
                 */
                403: unknown;
                /**
                 * User not found.
                 */
                404: UserNotFoundException;
            };
        };
    };
    '/api/users/{id}/permissions': {
        patch: {
            req: UpdatePermissionsData;
            res: {
                /**
                 * The user permissions have been successfully updated.
                 */
                200: User;
                /**
                 * Invalid input data.
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
                /**
                 * User not found.
                 */
                404: unknown;
            };
        };
        get: {
            req: GetPermissionsData;
            res: {
                /**
                 * The user's permissions.
                 */
                200: {
                    canManageResources?: boolean;
                    canManageSystemConfiguration?: boolean;
                    canManageUsers?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
                /**
                 * User not found.
                 */
                404: unknown;
            };
        };
    };
    '/api/users/permissions': {
        post: {
            req: BulkUpdatePermissionsData;
            res: {
                /**
                 * The user permissions have been successfully updated.
                 */
                200: Array<User>;
                /**
                 * Invalid input data.
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
            };
        };
    };
    '/api/users/with-permission': {
        get: {
            req: GetAllWithPermissionData;
            res: {
                /**
                 * List of users with the specified permission.
                 */
                200: PaginatedUsersResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to manage users.
                 */
                403: unknown;
            };
        };
    };
    '/api/auth/session/local': {
        post: {
            req: CreateSessionData;
            res: {
                /**
                 * The session has been created
                 */
                200: CreateSessionResponse;
                /**
                 * Unauthorized - Invalid credentials
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/session': {
        delete: {
            res: {
                /**
                 * The session has been deleted
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/sso/providers': {
        get: {
            res: {
                /**
                 * The list of SSO providers
                 */
                200: Array<SSOProvider>;
            };
        };
        post: {
            req: CreateOneSsoProviderData;
            res: {
                /**
                 * The SSO provider has been created
                 */
                201: SSOProvider;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
            };
        };
    };
    '/api/auth/sso/providers/{id}': {
        get: {
            req: GetOneSsoProviderByIdData;
            res: {
                /**
                 * The SSO provider with full configuration
                 */
                200: SSOProvider;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
                /**
                 * Provider not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateOneSsoProviderData;
            res: {
                /**
                 * The SSO provider has been updated
                 */
                200: SSOProvider;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
                /**
                 * Provider not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOneSsoProviderData;
            res: {
                /**
                 * The SSO provider has been deleted
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - Insufficient permissions
                 */
                403: unknown;
                /**
                 * Provider not found
                 */
                404: unknown;
            };
        };
    };
    '/api/auth/sso/OIDC/{providerId}/login': {
        get: {
            req: LoginWithOidcData;
            res: {
                /**
                 * The user has been logged in
                 */
                200: unknown;
            };
        };
    };
    '/api/auth/sso/OIDC/{providerId}/callback': {
        get: {
            req: OidcLoginCallbackData;
            res: {
                /**
                 * The user has been logged in
                 */
                200: CreateSessionResponse;
            };
        };
    };
    '/api/resources/groups': {
        post: {
            req: CreateOneResourceGroupData;
            res: {
                /**
                 * The resource group has been successfully created.
                 */
                201: ResourceGroup;
                /**
                 * Bad Request.
                 */
                400: unknown;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
        get: {
            req: GetAllResourceGroupsData;
            res: {
                /**
                 * List of resource groups with pagination.
                 */
                200: PaginatedResourceGroupResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/groups/{id}': {
        get: {
            req: GetOneResourceGroupByIdData;
            res: {
                /**
                 * The resource group details.
                 */
                200: ResourceGroup;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource group not found.
                 */
                404: unknown;
            };
        };
        patch: {
            req: UpdateOneResourceGroupData;
            res: {
                /**
                 * The resource group has been successfully updated.
                 */
                200: ResourceGroup;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource group not found.
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOneResourceGroupData;
            res: {
                /**
                 * The resource group has been successfully deleted.
                 */
                204: void;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource group not found.
                 */
                404: unknown;
            };
        };
    };
    '/api/resources': {
        post: {
            req: CreateOneResourceData;
            res: {
                /**
                 * The resource has been successfully created.
                 */
                201: Resource;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
        get: {
            req: GetAllResourcesData;
            res: {
                /**
                 * List of resources with pagination.
                 */
                200: PaginatedResourceResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{id}': {
        get: {
            req: GetOneResourceByIdData;
            res: {
                /**
                 * The found resource.
                 */
                200: Resource;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateOneResourceData;
            res: {
                /**
                 * The resource has been successfully updated.
                 */
                200: Resource;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
        delete: {
            req: DeleteOneResourceData;
            res: {
                /**
                 * The resource has been successfully deleted.
                 */
                204: void;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{id}/groups/{groupId}': {
        post: {
            req: AddResourceToGroupData;
            res: {
                /**
                 * The resource has been successfully added to the group.
                 */
                200: Resource;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource or Group not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: RemoveResourceFromGroupData;
            res: {
                /**
                 * The resource has been successfully removed from the group.
                 */
                204: void;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource or Group not found, or resource not in group
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/start': {
        post: {
            req: StartSessionData;
            res: {
                /**
                 * Usage session started successfully.
                 */
                201: ResourceUsage;
                /**
                 * Bad Request - Invalid input data
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/end': {
        put: {
            req: EndSessionData;
            res: {
                /**
                 * Usage session ended successfully.
                 */
                200: ResourceUsage;
                /**
                 * Bad Request - Invalid input data or no active session
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource or session not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/history': {
        get: {
            req: GetHistoryOfResourceUsageData;
            res: {
                /**
                 * Resource usage history retrieved successfully.
                 */
                200: GetResourceHistoryResponseDto;
                /**
                 * Bad Request - Invalid pagination parameters
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/usage/active': {
        get: {
            req: GetActiveSessionData;
            res: {
                /**
                 * Active session retrieved successfully.
                 */
                200: GetActiveUsageSessionDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/complete': {
        post: {
            req: MarkCompletedData;
            res: {
                /**
                 * Introduction marked as completed successfully.
                 */
                201: ResourceIntroduction;
                /**
                 * Bad request - Neither userId nor userIdentifier provided
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * User not found with the provided identifier
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions': {
        get: {
            req: GetAllResourceIntroductionsData;
            res: {
                /**
                 * Resource introductions
                 */
                200: PaginatedResourceIntroductionResponseDto;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/status': {
        get: {
            req: CheckStatusData;
            res: {
                /**
                 * Status retrieved successfully
                 */
                200: {
                    hasValidIntroduction?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{introductionId}/revoke': {
        post: {
            req: MarkRevokedData;
            res: {
                /**
                 * Introduction revoked successfully
                 */
                201: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{introductionId}/unrevoke': {
        post: {
            req: MarkUnrevokedData;
            res: {
                /**
                 * Introduction unrevoked successfully
                 */
                201: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{introductionId}/history': {
        get: {
            req: GetHistoryOfIntroductionData;
            res: {
                /**
                 * Introduction history
                 */
                200: Array<ResourceIntroductionHistoryItem>;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{introductionId}/revoked': {
        get: {
            req: CheckIsRevokedStatusData;
            res: {
                /**
                 * Status retrieved successfully
                 */
                200: {
                    isRevoked?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/{introductionId}': {
        get: {
            req: GetOneResourceIntroductionData;
            res: {
                /**
                 * Introduction retrieved successfully
                 */
                200: ResourceIntroduction;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Forbidden - User does not have permission to view this introduction
                 */
                403: unknown;
                /**
                 * Introduction not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introductions/permissions/manage': {
        get: {
            req: CheckCanManagePermissionData;
            res: {
                /**
                 * Returns whether the user can manage introductions
                 */
                200: {
                    canManageIntroductions?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introducers': {
        get: {
            req: GetAllResourceIntroducersData;
            res: {
                /**
                 * List of resource introducers
                 */
                200: Array<ResourceIntroducer>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introducers/{userId}': {
        post: {
            req: AddOneData;
            res: {
                /**
                 * User added as an introducer
                 */
                201: ResourceIntroducer;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
        delete: {
            req: RemoveOneData;
            res: {
                /**
                 * User removed as an introducer
                 */
                204: void;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/introducers/can-manage': {
        get: {
            req: CheckCanManagePermissionData;
            res: {
                /**
                 * Permission check result
                 */
                200: CanManageIntroducersResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introducers': {
        get: {
            req: GetAllResourceGroupIntroducersData;
            res: {
                /**
                 * List of resource group introducers
                 */
                200: Array<ResourceIntroducer>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introducers/{userId}': {
        post: {
            req: AddGroupIntroducerData;
            res: {
                /**
                 * User added as a group introducer
                 */
                201: ResourceIntroducer;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
        delete: {
            req: RemoveGroupIntroducerData;
            res: {
                /**
                 * User removed as a group introducer
                 */
                204: void;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/complete': {
        post: {
            req: MarkGroupIntroductionCompletedData;
            res: {
                /**
                 * Introduction marked as completed successfully.
                 */
                201: ResourceIntroduction;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * User or resource group not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions': {
        get: {
            req: GetAllResourceGroupIntroductionsData;
            res: {
                /**
                 * Resource group introductions
                 */
                200: unknown;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/status': {
        get: {
            req: CheckGroupIntroductionStatusData;
            res: {
                /**
                 * Status retrieved successfully
                 */
                200: {
                    hasValidIntroduction?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{introductionId}/revoke': {
        post: {
            req: MarkGroupIntroductionRevokedData;
            res: {
                /**
                 * Introduction revoked successfully
                 */
                201: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{introductionId}/unrevoke': {
        post: {
            req: MarkGroupIntroductionUnrevokedData;
            res: {
                /**
                 * Introduction unrevoked successfully
                 */
                201: ResourceIntroductionHistoryItem;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{introductionId}/history': {
        get: {
            req: GetHistoryOfGroupIntroductionData;
            res: {
                /**
                 * Introduction history
                 */
                200: Array<ResourceIntroductionHistoryItem>;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
    };
    '/api/resource-groups/{groupId}/introductions/{introductionId}': {
        get: {
            req: GetOneGroupIntroductionData;
            res: {
                /**
                 * Resource group introduction
                 */
                200: ResourceIntroduction;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/mqtt/config': {
        get: {
            req: GetOneMqttConfigurationData;
            res: {
                /**
                 * Returns the MQTT configuration for the resource
                 */
                200: MqttResourceConfig;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
        post: {
            req: UpsertOneData;
            res: {
                /**
                 * MQTT configuration created or updated successfully
                 */
                201: MqttResourceConfig;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOneMqttConfigurationData;
            res: {
                /**
                 * MQTT configuration deleted successfully
                 */
                200: unknown;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource or MQTT configuration not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/mqtt/config/test': {
        post: {
            req: TestOneData;
            res: {
                /**
                 * Test result
                 */
                200: TestMqttConfigResponseDto;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource or MQTT configuration not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers': {
        get: {
            res: {
                /**
                 * Returns all MQTT servers
                 */
                200: Array<MqttServer>;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        post: {
            req: CreateOneMqttServerData;
            res: {
                /**
                 * MQTT server created successfully
                 */
                201: MqttServer;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/mqtt/servers/{id}': {
        get: {
            req: GetOneMqttServerByIdData;
            res: {
                /**
                 * Returns the MQTT server with the specified ID
                 */
                200: MqttServer;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateOneMqttServerData;
            res: {
                /**
                 * MQTT server updated successfully
                 */
                200: MqttServer;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOneMqttServerData;
            res: {
                /**
                 * MQTT server deleted successfully
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers/{id}/test': {
        post: {
            req: TestConnectionData;
            res: {
                /**
                 * Connection test result
                 */
                200: TestConnectionResponseDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers/{id}/status': {
        get: {
            req: GetStatusOfOneData;
            res: {
                /**
                 * MQTT server connection status and statistics
                 */
                200: MqttServerStatusDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * MQTT server not found
                 */
                404: unknown;
            };
        };
    };
    '/api/mqtt/servers/status': {
        get: {
            res: {
                /**
                 * All MQTT server connection statuses and statistics
                 */
                200: AllMqttServerStatusesDto;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/events': {
        get: {
            req: SseControllerStreamEventsData;
            res: {
                200: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/webhooks': {
        get: {
            req: GetAllWebhookConfigurationsData;
            res: {
                /**
                 * List of webhook configurations for the resource
                 */
                200: Array<WebhookConfigResponseDto>;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
            };
        };
        post: {
            req: CreateOneWebhookConfigurationData;
            res: {
                /**
                 * The webhook configuration has been created
                 */
                201: WebhookConfigResponseDto;
                /**
                 * Invalid input
                 */
                400: unknown;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Resource not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/webhooks/{id}': {
        get: {
            req: GetOneWebhookConfigurationByIdData;
            res: {
                /**
                 * The webhook configuration
                 */
                200: WebhookConfigResponseDto;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Webhook configuration not found
                 */
                404: unknown;
            };
        };
        put: {
            req: UpdateOneWebhookConfigurationData;
            res: {
                /**
                 * The webhook configuration has been updated
                 */
                200: WebhookConfigResponseDto;
                /**
                 * Invalid input
                 */
                400: unknown;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Webhook configuration not found
                 */
                404: unknown;
            };
        };
        delete: {
            req: DeleteOneWebhookConfigurationData;
            res: {
                /**
                 * The webhook configuration has been deleted
                 */
                204: void;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Webhook configuration not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/webhooks/{id}/status': {
        put: {
            req: UpdateStatusData;
            res: {
                /**
                 * The webhook status has been updated
                 */
                200: WebhookConfigResponseDto;
                /**
                 * Invalid input
                 */
                400: unknown;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Webhook configuration not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/webhooks/{id}/test': {
        post: {
            req: TestData;
            res: {
                /**
                 * Test result
                 */
                200: WebhookTestResponseDto;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Webhook configuration not found
                 */
                404: unknown;
            };
        };
    };
    '/api/resources/{resourceId}/webhooks/{id}/regenerate-secret': {
        post: {
            req: RegenerateSecretData;
            res: {
                /**
                 * The webhook secret has been regenerated
                 */
                200: WebhookConfigResponseDto;
                /**
                 * User is not authenticated
                 */
                401: unknown;
                /**
                 * User does not have permission to manage this resource
                 */
                403: unknown;
                /**
                 * Webhook configuration not found
                 */
                404: unknown;
            };
        };
    };
};